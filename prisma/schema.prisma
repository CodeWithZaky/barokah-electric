generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    role          UserRole  @default(USER)
    accounts      Account[]
    address       Address[]
    carts         Cart[]
    orders        Order[]
    product       Product[]
    sessions      Session[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Address {
    id         Int     @id @default(autoincrement())
    name       String
    phone      String
    email      String
    address    String
    postalCode String
    city       String
    province   String
    isPrimary  Boolean @default(false)
    country    String  @default("Indonesia")
    userId     String
    user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
    id            Int            @id @default(autoincrement())
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    name          String         @db.VarChar(255)
    description   String
    price         Float
    rate          Float
    stock         Int            @default(0)
    published     Boolean        @default(false)
    userId        String
    cartItems     CartItem[]
    Order_product OrderProduct[]
    user          User           @relation(fields: [userId], references: [id])
    images        ProductImage[]
}

model ProductImage {
    id        Int      @id @default(autoincrement())
    imageURL  String
    productId Int?
    Product   Product? @relation(fields: [productId], references: [id])
}

model Cart {
    id        Int        @id @default(autoincrement())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    userId    String
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    items     CartItem[]
}

model CartItem {
    id        Int     @id @default(autoincrement())
    quantity  Int
    productId Int
    cartId    Int
    checked   Boolean @default(false)
    cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
    name           String
    phone          String
    email          String
    address        String
    postalCode     String
    status         OrderStatus    @default(PENDING)
    city           String
    country        String         @default("Indonesia")
    receipt        String?
    total          Int
    id             Int            @id @default(autoincrement())
    userId         String
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    notes          String?
    province       String
    image          String?
    shippingMethod ShippingMethod @default(JNT)
    user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    orderProducts  OrderProduct[]
    Payment        Payment?
}

model OrderProduct {
    productId Int
    quantity  Int
    id        Int     @id @default(autoincrement())
    orderId   Int
    order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
    id            Int           @id @default(autoincrement())
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    orderId       Int           @unique
    status        PaymentStatus @default(PENDING)
    transactionId String?
    amount        Float         @default(0)
    bank          BankName?
    accountName   String?
    accountNumber String?
    dueDate       DateTime?
    instructions  String?
    isRefunded    Boolean       @default(false)
    refundAmount  Float?
    refundDate    DateTime?
    paymentMethod PaymentMethod @default(COD)
    order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum BankName {
    BRI
    BNI
    BTN
    BSI
    MANDIRI
}

enum UserRole {
    USER
    ADMIN
}

enum OrderStatus {
    PENDING
    PROCESSING
    PACKED
    SHIPPED
    DELIVERED
    CANCELLED
    RETURN_REQUEST
    RETURNED
    REFUNDED
    COMPLETED
}

enum ShippingMethod {
    JNT
    JNE
    SICEPAT
    POS_INDONESIA
    TIKI
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
    CANCELLED
}

enum PaymentMethod {
    COD
    BANK_TRANSFER
}
